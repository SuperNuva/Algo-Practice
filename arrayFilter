// even    // [1,2,3,4,5].even() should return [2,4]
// odd     // [1,2,3,4,5].odd() should return [1,3,5]
// under   // [1,2,3,4,5].under(4) should return [1,2,3]
// over    // [1,2,3,4,5].over(4) should return [5]
// inRange // [1,2,3,4,5].inRange(1,3) should return [1,2,3]

Array.prototype.isInt = function() {
  return this.filter(n => (typeof n === 'number') && n % 1 === 0)
}

Array.prototype.even = function() {
  return this.isInt().filter(n => n % 2 === 0)
}

Array.prototype.odd = function() {
  return this.isInt().filter(n => n % 2 !== 0)
}

Array.prototype.under= function(num) {
  return this.isInt().filter(n => n < num)
}

Array.prototype.over = function(num) {
  return this.isInt().filter(n => n > num)
}

Array.prototype.range = function(num1, num2) {
  return this.isInt().filter(n => n >= num1 && n <= num2)
}
